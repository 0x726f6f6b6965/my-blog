// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TBlog is an object representing the database table.
type TBlog struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title      string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content    string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	Author     string    `boil:"author" json:"author" toml:"author" yaml:"author"`
	CreateTime time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *tBlogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tBlogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TBlogColumns = struct {
	ID         string
	Title      string
	Content    string
	Author     string
	CreateTime string
	UpdateTime string
}{
	ID:         "id",
	Title:      "title",
	Content:    "content",
	Author:     "author",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

var TBlogTableColumns = struct {
	ID         string
	Title      string
	Content    string
	Author     string
	CreateTime string
	UpdateTime string
}{
	ID:         "t_blog.id",
	Title:      "t_blog.title",
	Content:    "t_blog.content",
	Author:     "t_blog.author",
	CreateTime: "t_blog.create_time",
	UpdateTime: "t_blog.update_time",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TBlogWhere = struct {
	ID         whereHelperstring
	Title      whereHelperstring
	Content    whereHelperstring
	Author     whereHelperstring
	CreateTime whereHelpertime_Time
	UpdateTime whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"t_blog\".\"id\""},
	Title:      whereHelperstring{field: "\"t_blog\".\"title\""},
	Content:    whereHelperstring{field: "\"t_blog\".\"content\""},
	Author:     whereHelperstring{field: "\"t_blog\".\"author\""},
	CreateTime: whereHelpertime_Time{field: "\"t_blog\".\"create_time\""},
	UpdateTime: whereHelpertime_Time{field: "\"t_blog\".\"update_time\""},
}

// TBlogRels is where relationship names are stored.
var TBlogRels = struct {
	AuthorTUser string
}{
	AuthorTUser: "AuthorTUser",
}

// tBlogR is where relationships are stored.
type tBlogR struct {
	AuthorTUser *TUser `boil:"AuthorTUser" json:"AuthorTUser" toml:"AuthorTUser" yaml:"AuthorTUser"`
}

// NewStruct creates a new relationship struct
func (*tBlogR) NewStruct() *tBlogR {
	return &tBlogR{}
}

func (r *tBlogR) GetAuthorTUser() *TUser {
	if r == nil {
		return nil
	}
	return r.AuthorTUser
}

// tBlogL is where Load methods for each relationship are stored.
type tBlogL struct{}

var (
	tBlogAllColumns            = []string{"id", "title", "content", "author", "create_time", "update_time"}
	tBlogColumnsWithoutDefault = []string{"title", "content", "author"}
	tBlogColumnsWithDefault    = []string{"id", "create_time", "update_time"}
	tBlogPrimaryKeyColumns     = []string{"id"}
	tBlogGeneratedColumns      = []string{}
)

type (
	// TBlogSlice is an alias for a slice of pointers to TBlog.
	// This should almost always be used instead of []TBlog.
	TBlogSlice []*TBlog
	// TBlogHook is the signature for custom TBlog hook methods
	TBlogHook func(context.Context, boil.ContextExecutor, *TBlog) error

	tBlogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tBlogType                 = reflect.TypeOf(&TBlog{})
	tBlogMapping              = queries.MakeStructMapping(tBlogType)
	tBlogPrimaryKeyMapping, _ = queries.BindMapping(tBlogType, tBlogMapping, tBlogPrimaryKeyColumns)
	tBlogInsertCacheMut       sync.RWMutex
	tBlogInsertCache          = make(map[string]insertCache)
	tBlogUpdateCacheMut       sync.RWMutex
	tBlogUpdateCache          = make(map[string]updateCache)
	tBlogUpsertCacheMut       sync.RWMutex
	tBlogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tBlogAfterSelectHooks []TBlogHook

var tBlogBeforeInsertHooks []TBlogHook
var tBlogAfterInsertHooks []TBlogHook

var tBlogBeforeUpdateHooks []TBlogHook
var tBlogAfterUpdateHooks []TBlogHook

var tBlogBeforeDeleteHooks []TBlogHook
var tBlogAfterDeleteHooks []TBlogHook

var tBlogBeforeUpsertHooks []TBlogHook
var tBlogAfterUpsertHooks []TBlogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TBlog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TBlog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TBlog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TBlog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TBlog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TBlog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TBlog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TBlog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TBlog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTBlogHook registers your hook function for all future operations.
func AddTBlogHook(hookPoint boil.HookPoint, tBlogHook TBlogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tBlogAfterSelectHooks = append(tBlogAfterSelectHooks, tBlogHook)
	case boil.BeforeInsertHook:
		tBlogBeforeInsertHooks = append(tBlogBeforeInsertHooks, tBlogHook)
	case boil.AfterInsertHook:
		tBlogAfterInsertHooks = append(tBlogAfterInsertHooks, tBlogHook)
	case boil.BeforeUpdateHook:
		tBlogBeforeUpdateHooks = append(tBlogBeforeUpdateHooks, tBlogHook)
	case boil.AfterUpdateHook:
		tBlogAfterUpdateHooks = append(tBlogAfterUpdateHooks, tBlogHook)
	case boil.BeforeDeleteHook:
		tBlogBeforeDeleteHooks = append(tBlogBeforeDeleteHooks, tBlogHook)
	case boil.AfterDeleteHook:
		tBlogAfterDeleteHooks = append(tBlogAfterDeleteHooks, tBlogHook)
	case boil.BeforeUpsertHook:
		tBlogBeforeUpsertHooks = append(tBlogBeforeUpsertHooks, tBlogHook)
	case boil.AfterUpsertHook:
		tBlogAfterUpsertHooks = append(tBlogAfterUpsertHooks, tBlogHook)
	}
}

// OneG returns a single tBlog record from the query using the global executor.
func (q tBlogQuery) OneG(ctx context.Context) (*TBlog, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single tBlog record from the query.
func (q tBlogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TBlog, error) {
	o := &TBlog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for t_blog")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TBlog records from the query using the global executor.
func (q tBlogQuery) AllG(ctx context.Context) (TBlogSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TBlog records from the query.
func (q tBlogQuery) All(ctx context.Context, exec boil.ContextExecutor) (TBlogSlice, error) {
	var o []*TBlog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to TBlog slice")
	}

	if len(tBlogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TBlog records in the query using the global executor
func (q tBlogQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TBlog records in the query.
func (q tBlogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count t_blog rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tBlogQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tBlogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if t_blog exists")
	}

	return count > 0, nil
}

// AuthorTUser pointed to by the foreign key.
func (o *TBlog) AuthorTUser(mods ...qm.QueryMod) tUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"email\" = ?", o.Author),
	}

	queryMods = append(queryMods, mods...)

	return TUsers(queryMods...)
}

// LoadAuthorTUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tBlogL) LoadAuthorTUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTBlog interface{}, mods queries.Applicator) error {
	var slice []*TBlog
	var object *TBlog

	if singular {
		var ok bool
		object, ok = maybeTBlog.(*TBlog)
		if !ok {
			object = new(TBlog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTBlog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTBlog))
			}
		}
	} else {
		s, ok := maybeTBlog.(*[]*TBlog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTBlog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTBlog))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tBlogR{}
		}
		args = append(args, object.Author)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tBlogR{}
			}

			for _, a := range args {
				if a == obj.Author {
					continue Outer
				}
			}

			args = append(args, obj.Author)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`t_user`),
		qm.WhereIn(`t_user.email in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TUser")
	}

	var resultSlice []*TUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for t_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for t_user")
	}

	if len(tUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AuthorTUser = foreign
		if foreign.R == nil {
			foreign.R = &tUserR{}
		}
		foreign.R.AuthorTBlogs = append(foreign.R.AuthorTBlogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Author == foreign.Email {
				local.R.AuthorTUser = foreign
				if foreign.R == nil {
					foreign.R = &tUserR{}
				}
				foreign.R.AuthorTBlogs = append(foreign.R.AuthorTBlogs, local)
				break
			}
		}
	}

	return nil
}

// SetAuthorTUserG of the tBlog to the related item.
// Sets o.R.AuthorTUser to related.
// Adds o to related.R.AuthorTBlogs.
// Uses the global database handle.
func (o *TBlog) SetAuthorTUserG(ctx context.Context, insert bool, related *TUser) error {
	return o.SetAuthorTUser(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthorTUser of the tBlog to the related item.
// Sets o.R.AuthorTUser to related.
// Adds o to related.R.AuthorTBlogs.
func (o *TBlog) SetAuthorTUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"t_blog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author"}),
		strmangle.WhereClause("\"", "\"", 2, tBlogPrimaryKeyColumns),
	)
	values := []interface{}{related.Email, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Author = related.Email
	if o.R == nil {
		o.R = &tBlogR{
			AuthorTUser: related,
		}
	} else {
		o.R.AuthorTUser = related
	}

	if related.R == nil {
		related.R = &tUserR{
			AuthorTBlogs: TBlogSlice{o},
		}
	} else {
		related.R.AuthorTBlogs = append(related.R.AuthorTBlogs, o)
	}

	return nil
}

// TBlogs retrieves all the records using an executor.
func TBlogs(mods ...qm.QueryMod) tBlogQuery {
	mods = append(mods, qm.From("\"t_blog\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"t_blog\".*"})
	}

	return tBlogQuery{q}
}

// FindTBlogG retrieves a single record by ID.
func FindTBlogG(ctx context.Context, iD string, selectCols ...string) (*TBlog, error) {
	return FindTBlog(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTBlog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTBlog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TBlog, error) {
	tBlogObj := &TBlog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"t_blog\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tBlogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from t_blog")
	}

	if err = tBlogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tBlogObj, err
	}

	return tBlogObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TBlog) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TBlog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_blog provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tBlogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tBlogInsertCacheMut.RLock()
	cache, cached := tBlogInsertCache[key]
	tBlogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tBlogAllColumns,
			tBlogColumnsWithDefault,
			tBlogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tBlogType, tBlogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tBlogType, tBlogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"t_blog\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"t_blog\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into t_blog")
	}

	if !cached {
		tBlogInsertCacheMut.Lock()
		tBlogInsertCache[key] = cache
		tBlogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TBlog record using the global executor.
// See Update for more documentation.
func (o *TBlog) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TBlog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TBlog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tBlogUpdateCacheMut.RLock()
	cache, cached := tBlogUpdateCache[key]
	tBlogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tBlogAllColumns,
			tBlogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update t_blog, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"t_blog\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tBlogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tBlogType, tBlogMapping, append(wl, tBlogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update t_blog row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for t_blog")
	}

	if !cached {
		tBlogUpdateCacheMut.Lock()
		tBlogUpdateCache[key] = cache
		tBlogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tBlogQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tBlogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for t_blog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for t_blog")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TBlogSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TBlogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBlogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"t_blog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tBlogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in tBlog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all tBlog")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TBlog) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TBlog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_blog provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tBlogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tBlogUpsertCacheMut.RLock()
	cache, cached := tBlogUpsertCache[key]
	tBlogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tBlogAllColumns,
			tBlogColumnsWithDefault,
			tBlogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tBlogAllColumns,
			tBlogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert t_blog, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tBlogPrimaryKeyColumns))
			copy(conflict, tBlogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"t_blog\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tBlogType, tBlogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tBlogType, tBlogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert t_blog")
	}

	if !cached {
		tBlogUpsertCacheMut.Lock()
		tBlogUpsertCache[key] = cache
		tBlogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TBlog record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TBlog) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TBlog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TBlog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no TBlog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tBlogPrimaryKeyMapping)
	sql := "DELETE FROM \"t_blog\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from t_blog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for t_blog")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tBlogQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q tBlogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no tBlogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from t_blog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_blog")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TBlogSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TBlogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tBlogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBlogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"t_blog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tBlogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from tBlog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_blog")
	}

	if len(tBlogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TBlog) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: no TBlog provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TBlog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTBlog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TBlogSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: empty TBlogSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TBlogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TBlogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBlogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"t_blog\".* FROM \"t_blog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tBlogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in TBlogSlice")
	}

	*o = slice

	return nil
}

// TBlogExistsG checks if the TBlog row exists.
func TBlogExistsG(ctx context.Context, iD string) (bool, error) {
	return TBlogExists(ctx, boil.GetContextDB(), iD)
}

// TBlogExists checks if the TBlog row exists.
func TBlogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"t_blog\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if t_blog exists")
	}

	return exists, nil
}

// Exists checks if the TBlog row exists.
func (o *TBlog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TBlogExists(ctx, exec, o.ID)
}
