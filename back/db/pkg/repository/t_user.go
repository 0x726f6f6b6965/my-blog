// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TUser is an object representing the database table.
type TUser struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username   string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	Email      string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Salt       string    `boil:"salt" json:"salt" toml:"salt" yaml:"salt"`
	Password   string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	CreateTime time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *tUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TUserColumns = struct {
	ID         string
	Username   string
	Email      string
	Salt       string
	Password   string
	CreateTime string
	UpdateTime string
}{
	ID:         "id",
	Username:   "username",
	Email:      "email",
	Salt:       "salt",
	Password:   "password",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

var TUserTableColumns = struct {
	ID         string
	Username   string
	Email      string
	Salt       string
	Password   string
	CreateTime string
	UpdateTime string
}{
	ID:         "t_user.id",
	Username:   "t_user.username",
	Email:      "t_user.email",
	Salt:       "t_user.salt",
	Password:   "t_user.password",
	CreateTime: "t_user.create_time",
	UpdateTime: "t_user.update_time",
}

// Generated where

var TUserWhere = struct {
	ID         whereHelperstring
	Username   whereHelperstring
	Email      whereHelperstring
	Salt       whereHelperstring
	Password   whereHelperstring
	CreateTime whereHelpertime_Time
	UpdateTime whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"t_user\".\"id\""},
	Username:   whereHelperstring{field: "\"t_user\".\"username\""},
	Email:      whereHelperstring{field: "\"t_user\".\"email\""},
	Salt:       whereHelperstring{field: "\"t_user\".\"salt\""},
	Password:   whereHelperstring{field: "\"t_user\".\"password\""},
	CreateTime: whereHelpertime_Time{field: "\"t_user\".\"create_time\""},
	UpdateTime: whereHelpertime_Time{field: "\"t_user\".\"update_time\""},
}

// TUserRels is where relationship names are stored.
var TUserRels = struct {
	AuthorTBlogs string
}{
	AuthorTBlogs: "AuthorTBlogs",
}

// tUserR is where relationships are stored.
type tUserR struct {
	AuthorTBlogs TBlogSlice `boil:"AuthorTBlogs" json:"AuthorTBlogs" toml:"AuthorTBlogs" yaml:"AuthorTBlogs"`
}

// NewStruct creates a new relationship struct
func (*tUserR) NewStruct() *tUserR {
	return &tUserR{}
}

func (r *tUserR) GetAuthorTBlogs() TBlogSlice {
	if r == nil {
		return nil
	}
	return r.AuthorTBlogs
}

// tUserL is where Load methods for each relationship are stored.
type tUserL struct{}

var (
	tUserAllColumns            = []string{"id", "username", "email", "salt", "password", "create_time", "update_time"}
	tUserColumnsWithoutDefault = []string{"username", "email", "salt", "password"}
	tUserColumnsWithDefault    = []string{"id", "create_time", "update_time"}
	tUserPrimaryKeyColumns     = []string{"id"}
	tUserGeneratedColumns      = []string{}
)

type (
	// TUserSlice is an alias for a slice of pointers to TUser.
	// This should almost always be used instead of []TUser.
	TUserSlice []*TUser
	// TUserHook is the signature for custom TUser hook methods
	TUserHook func(context.Context, boil.ContextExecutor, *TUser) error

	tUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tUserType                 = reflect.TypeOf(&TUser{})
	tUserMapping              = queries.MakeStructMapping(tUserType)
	tUserPrimaryKeyMapping, _ = queries.BindMapping(tUserType, tUserMapping, tUserPrimaryKeyColumns)
	tUserInsertCacheMut       sync.RWMutex
	tUserInsertCache          = make(map[string]insertCache)
	tUserUpdateCacheMut       sync.RWMutex
	tUserUpdateCache          = make(map[string]updateCache)
	tUserUpsertCacheMut       sync.RWMutex
	tUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tUserAfterSelectHooks []TUserHook

var tUserBeforeInsertHooks []TUserHook
var tUserAfterInsertHooks []TUserHook

var tUserBeforeUpdateHooks []TUserHook
var tUserAfterUpdateHooks []TUserHook

var tUserBeforeDeleteHooks []TUserHook
var tUserAfterDeleteHooks []TUserHook

var tUserBeforeUpsertHooks []TUserHook
var tUserAfterUpsertHooks []TUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTUserHook registers your hook function for all future operations.
func AddTUserHook(hookPoint boil.HookPoint, tUserHook TUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tUserAfterSelectHooks = append(tUserAfterSelectHooks, tUserHook)
	case boil.BeforeInsertHook:
		tUserBeforeInsertHooks = append(tUserBeforeInsertHooks, tUserHook)
	case boil.AfterInsertHook:
		tUserAfterInsertHooks = append(tUserAfterInsertHooks, tUserHook)
	case boil.BeforeUpdateHook:
		tUserBeforeUpdateHooks = append(tUserBeforeUpdateHooks, tUserHook)
	case boil.AfterUpdateHook:
		tUserAfterUpdateHooks = append(tUserAfterUpdateHooks, tUserHook)
	case boil.BeforeDeleteHook:
		tUserBeforeDeleteHooks = append(tUserBeforeDeleteHooks, tUserHook)
	case boil.AfterDeleteHook:
		tUserAfterDeleteHooks = append(tUserAfterDeleteHooks, tUserHook)
	case boil.BeforeUpsertHook:
		tUserBeforeUpsertHooks = append(tUserBeforeUpsertHooks, tUserHook)
	case boil.AfterUpsertHook:
		tUserAfterUpsertHooks = append(tUserAfterUpsertHooks, tUserHook)
	}
}

// OneG returns a single tUser record from the query using the global executor.
func (q tUserQuery) OneG(ctx context.Context) (*TUser, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single tUser record from the query.
func (q tUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TUser, error) {
	o := &TUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for t_user")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TUser records from the query using the global executor.
func (q tUserQuery) AllG(ctx context.Context) (TUserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TUser records from the query.
func (q tUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (TUserSlice, error) {
	var o []*TUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to TUser slice")
	}

	if len(tUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TUser records in the query using the global executor
func (q tUserQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TUser records in the query.
func (q tUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count t_user rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tUserQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if t_user exists")
	}

	return count > 0, nil
}

// AuthorTBlogs retrieves all the t_blog's TBlogs with an executor via author column.
func (o *TUser) AuthorTBlogs(mods ...qm.QueryMod) tBlogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"t_blog\".\"author\"=?", o.Email),
	)

	return TBlogs(queryMods...)
}

// LoadAuthorTBlogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tUserL) LoadAuthorTBlogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTUser interface{}, mods queries.Applicator) error {
	var slice []*TUser
	var object *TUser

	if singular {
		var ok bool
		object, ok = maybeTUser.(*TUser)
		if !ok {
			object = new(TUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTUser))
			}
		}
	} else {
		s, ok := maybeTUser.(*[]*TUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tUserR{}
		}
		args = append(args, object.Email)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tUserR{}
			}

			for _, a := range args {
				if a == obj.Email {
					continue Outer
				}
			}

			args = append(args, obj.Email)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`t_blog`),
		qm.WhereIn(`t_blog.author in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load t_blog")
	}

	var resultSlice []*TBlog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice t_blog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on t_blog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for t_blog")
	}

	if len(tBlogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthorTBlogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tBlogR{}
			}
			foreign.R.AuthorTUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Email == foreign.Author {
				local.R.AuthorTBlogs = append(local.R.AuthorTBlogs, foreign)
				if foreign.R == nil {
					foreign.R = &tBlogR{}
				}
				foreign.R.AuthorTUser = local
				break
			}
		}
	}

	return nil
}

// AddAuthorTBlogsG adds the given related objects to the existing relationships
// of the t_user, optionally inserting them as new records.
// Appends related to o.R.AuthorTBlogs.
// Sets related.R.AuthorTUser appropriately.
// Uses the global database handle.
func (o *TUser) AddAuthorTBlogsG(ctx context.Context, insert bool, related ...*TBlog) error {
	return o.AddAuthorTBlogs(ctx, boil.GetContextDB(), insert, related...)
}

// AddAuthorTBlogs adds the given related objects to the existing relationships
// of the t_user, optionally inserting them as new records.
// Appends related to o.R.AuthorTBlogs.
// Sets related.R.AuthorTUser appropriately.
func (o *TUser) AddAuthorTBlogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TBlog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Author = o.Email
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"t_blog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"author"}),
				strmangle.WhereClause("\"", "\"", 2, tBlogPrimaryKeyColumns),
			)
			values := []interface{}{o.Email, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Author = o.Email
		}
	}

	if o.R == nil {
		o.R = &tUserR{
			AuthorTBlogs: related,
		}
	} else {
		o.R.AuthorTBlogs = append(o.R.AuthorTBlogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tBlogR{
				AuthorTUser: o,
			}
		} else {
			rel.R.AuthorTUser = o
		}
	}
	return nil
}

// TUsers retrieves all the records using an executor.
func TUsers(mods ...qm.QueryMod) tUserQuery {
	mods = append(mods, qm.From("\"t_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"t_user\".*"})
	}

	return tUserQuery{q}
}

// FindTUserG retrieves a single record by ID.
func FindTUserG(ctx context.Context, iD string, selectCols ...string) (*TUser, error) {
	return FindTUser(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TUser, error) {
	tUserObj := &TUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"t_user\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from t_user")
	}

	if err = tUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tUserObj, err
	}

	return tUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TUser) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tUserInsertCacheMut.RLock()
	cache, cached := tUserInsertCache[key]
	tUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tUserAllColumns,
			tUserColumnsWithDefault,
			tUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tUserType, tUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tUserType, tUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"t_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"t_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into t_user")
	}

	if !cached {
		tUserInsertCacheMut.Lock()
		tUserInsertCache[key] = cache
		tUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TUser record using the global executor.
// See Update for more documentation.
func (o *TUser) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tUserUpdateCacheMut.RLock()
	cache, cached := tUserUpdateCache[key]
	tUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tUserAllColumns,
			tUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update t_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"t_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tUserType, tUserMapping, append(wl, tUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update t_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for t_user")
	}

	if !cached {
		tUserUpdateCacheMut.Lock()
		tUserUpdateCache[key] = cache
		tUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tUserQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for t_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for t_user")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TUserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"t_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in tUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all tUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TUser) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tUserUpsertCacheMut.RLock()
	cache, cached := tUserUpsertCache[key]
	tUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tUserAllColumns,
			tUserColumnsWithDefault,
			tUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tUserAllColumns,
			tUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert t_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tUserPrimaryKeyColumns))
			copy(conflict, tUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"t_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tUserType, tUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tUserType, tUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert t_user")
	}

	if !cached {
		tUserUpsertCacheMut.Lock()
		tUserUpsertCache[key] = cache
		tUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TUser) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no TUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tUserPrimaryKeyMapping)
	sql := "DELETE FROM \"t_user\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from t_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for t_user")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tUserQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q tUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no tUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from t_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_user")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TUserSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"t_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from tUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_user")
	}

	if len(tUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TUser) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: no TUser provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TUserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: empty TUserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"t_user\".* FROM \"t_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in TUserSlice")
	}

	*o = slice

	return nil
}

// TUserExistsG checks if the TUser row exists.
func TUserExistsG(ctx context.Context, iD string) (bool, error) {
	return TUserExists(ctx, boil.GetContextDB(), iD)
}

// TUserExists checks if the TUser row exists.
func TUserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"t_user\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if t_user exists")
	}

	return exists, nil
}

// Exists checks if the TUser row exists.
func (o *TUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TUserExists(ctx, exec, o.ID)
}
