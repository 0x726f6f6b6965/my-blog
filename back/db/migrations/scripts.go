// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_create_user.down.sql (66B)
// 000001_create_user.up.sql (689B)
// 000002_create_blog.down.sql (28B)
// 000002_create_blog.up.sql (489B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_userDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x89\x2f\x2d\x4e\x2d\xb2\xe6\xe2\x02\xcb\xba\xf8\xfb\x3a\x7a\xfa\x21\x49\xa7\xe6\x26\x66\xe6\xc4\x27\xa6\xa4\x14\xa5\x16\x17\x5b\x03\x02\x00\x00\xff\xff\xce\xa3\xc0\x2d\x42\x00\x00\x00")

func _000001_create_userDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_userDownSql,
		"000001_create_user.down.sql",
	)
}

func _000001_create_userDownSql() (*asset, error) {
	bytes, err := _000001_create_userDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_user.down.sql", size: 66, mode: os.FileMode(0644), modTime: time.Unix(1704171932, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0xd7, 0x5, 0x32, 0x74, 0x50, 0x2b, 0x2c, 0x88, 0xd, 0x1f, 0x66, 0x20, 0x62, 0xb4, 0x28, 0x55, 0x6f, 0xc2, 0xdd, 0x9c, 0x9, 0x3e, 0xe0, 0x79, 0x73, 0x14, 0xf2, 0xe7, 0x7d, 0x4, 0x68}}
	return a, nil
}

var __000001_create_userUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x51\x6f\xda\x30\x10\xc7\xdf\xf3\x29\x6e\x1a\x5b\x6c\x20\x0c\xa6\x09\x6d\x99\xa6\x2c\x05\xa3\x46\x84\xd0\x42\x22\x41\x5b\x48\xad\xd8\xa2\x91\x48\x40\x8e\x03\x6d\x29\x7c\xf6\x2a\xa8\x10\x44\xe1\xa1\x6a\x1e\x22\xd9\xf7\xfb\xdd\xf9\xfe\x8d\x1e\x31\x5d\x02\x64\xe0\x12\xa7\x6f\x75\x1d\xb0\x5a\xe0\x74\x5d\x20\x03\xab\xef\xf6\x21\x08\x25\x7f\x94\x7f\x15\xe5\x8d\x6b\x76\x3b\xa6\xe5\x00\x8f\x68\x38\xf5\x29\x63\x82\x27\x09\x98\x3b\x4e\x01\x68\x5c\x92\x46\x1b\x10\x2c\xe8\x34\xe5\xb0\x01\x75\x7c\x4b\xb5\x67\x53\xbb\xa9\x6a\x7f\x2a\x5f\xbe\x16\xbe\x7d\x57\xd5\x62\xe9\xc7\x3f\x63\xec\xdf\xaf\x5e\xd6\x1b\x6d\x54\xfa\x9f\x13\x23\x64\xe8\xf9\x49\x1b\xad\xaa\xe5\x7a\x6d\x7d\x50\xc7\x06\x32\xf4\xbb\xca\x87\x0c\x5c\x2c\xa8\x80\xf3\x1d\x5c\xf3\xc2\x26\x0a\x00\x1c\xed\x2a\xfd\x34\xe1\x02\x6d\x2b\xd9\x17\x32\xf0\x3c\xab\x09\x9e\x63\x5d\x7b\x04\x9a\xa4\x65\x7a\xb6\x0b\x13\x1e\xfb\x82\xc6\x6c\x16\xf9\x69\x1a\x32\x84\xcb\x7b\x23\xf3\x63\x1a\x71\x08\x1e\xa8\xa0\x81\xe4\x02\x16\x54\x3c\x85\xf1\x04\xd5\x7e\xfe\xc6\xbb\x4e\xd9\x4c\xc7\xb3\xed\x5c\xdc\xe6\x79\x94\xea\x59\x38\xa1\x53\x79\x62\x42\xfd\x17\x3e\x01\xcf\x69\x92\x2c\x67\x82\x9d\x7b\xd2\x7b\x23\x10\x9c\x4a\xee\xcb\x30\xe2\x90\xfd\x12\x49\xa3\xf9\x9e\xdb\xc7\x80\xe2\xd9\x12\x61\x0c\xba\x9e\x53\x07\x49\xcc\xd9\xe7\x9b\x5c\xf5\xac\x8e\xd9\x1b\x42\x9b\x0c\x51\xc8\xf0\xf6\x1e\xbf\x06\x00\x00\xff\xff\x5e\xd5\x03\x02\xb1\x02\x00\x00")

func _000001_create_userUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_userUpSql,
		"000001_create_user.up.sql",
	)
}

func _000001_create_userUpSql() (*asset, error) {
	bytes, err := _000001_create_userUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_user.up.sql", size: 689, mode: os.FileMode(0644), modTime: time.Unix(1704171932, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0xc8, 0xc4, 0x25, 0xca, 0x7, 0x80, 0x53, 0x45, 0x1f, 0xb6, 0x40, 0xfd, 0x4f, 0x32, 0xdc, 0x7a, 0x35, 0x4a, 0x6c, 0x14, 0xd8, 0x0, 0xa3, 0x75, 0xc3, 0x47, 0xaf, 0x23, 0x17, 0xb7, 0x3a}}
	return a, nil
}

var __000002_create_blogDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x89\x4f\xca\xc9\x4f\xb7\x06\x04\x00\x00\xff\xff\x1f\x78\x2e\x21\x1c\x00\x00\x00")

func _000002_create_blogDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_create_blogDownSql,
		"000002_create_blog.down.sql",
	)
}

func _000002_create_blogDownSql() (*asset, error) {
	bytes, err := _000002_create_blogDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_create_blog.down.sql", size: 28, mode: os.FileMode(0644), modTime: time.Unix(1704171932, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xa3, 0xdf, 0x66, 0xab, 0x16, 0xe4, 0x53, 0x24, 0xd, 0xda, 0x8d, 0x9c, 0xa, 0x32, 0xb8, 0x83, 0xe9, 0x78, 0x6e, 0xe5, 0x40, 0x3c, 0xb4, 0x73, 0xab, 0xc5, 0x71, 0x19, 0x4, 0xe1, 0xef}}
	return a, nil
}

var __000002_create_blogUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xb1\x6e\xf2\x30\x14\x85\x77\x9e\xe2\x8c\xb6\xc4\xf2\xff\x53\x05\x53\x5a\x8c\x64\x35\x0d\x2d\xc4\x12\x4c\x96\x1b\xdf\x06\x4b\xc4\x46\xce\x4d\x4b\xdf\xbe\x82\x52\xe8\xc0\x56\x0f\x1e\x7c\xee\xfd\xac\xa3\xef\x61\xa9\x8a\x5a\xa1\x2e\xee\x4b\x35\x02\x00\x3d\x47\xb5\xa8\xa1\xd6\x7a\x55\xaf\xc0\xf6\x75\x97\x5a\x71\x4a\x8e\x27\x78\x18\xa3\x67\x30\x95\x7e\x31\x0a\x33\x35\x2f\x4c\x59\xa3\xa5\x68\xb3\x8b\x3e\x75\x76\x18\x82\x17\x72\x7c\xd9\xe0\xc0\x3b\x42\xb3\x75\xd9\x35\x4c\x19\xef\x2e\x7f\x86\xd8\x8a\x7f\xff\xef\xe4\x0f\xe6\xf8\x61\x65\xca\xf2\xba\xd5\xa4\xc8\x14\x19\x4c\x07\xbe\x11\xbb\x81\xb7\x29\x83\x3a\x17\x76\xd6\x79\x9f\xa9\xef\x91\xe9\x8d\x32\xc5\x86\x7a\xb0\x1d\x7a\xca\xe2\x94\xcb\x5b\xf8\x4c\x8e\xc9\x72\xe8\x08\xc7\xab\x67\xd7\xed\x2f\x73\x97\x5a\x22\xa6\x0f\x21\x25\x26\x93\xeb\xd4\x15\x32\xec\xfd\xdf\x21\xcf\x4b\xfd\x54\x2c\x37\x78\x54\x1b\x11\xbc\x3c\xbd\xcb\xe9\x68\x74\xf6\xa2\xab\x99\x5a\xdf\xf0\x12\xfc\xc1\x7e\xbb\xb1\x7b\xd7\x86\xe8\x38\xa4\x88\x45\x75\x16\x06\xf1\xab\xe1\x18\xc1\xcb\xe9\x57\x00\x00\x00\xff\xff\x39\x89\x19\x50\xe9\x01\x00\x00")

func _000002_create_blogUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_create_blogUpSql,
		"000002_create_blog.up.sql",
	)
}

func _000002_create_blogUpSql() (*asset, error) {
	bytes, err := _000002_create_blogUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_create_blog.up.sql", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1704351697, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xb6, 0xcb, 0x25, 0x12, 0xf0, 0x5f, 0x2b, 0x9c, 0x50, 0xb, 0x9a, 0x94, 0xf, 0xae, 0xc1, 0x9c, 0x95, 0xb9, 0x14, 0x41, 0x69, 0xfd, 0x9, 0xda, 0x40, 0xff, 0xa7, 0x9c, 0xa7, 0xf6, 0x84}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_user.down.sql": _000001_create_userDownSql,
	"000001_create_user.up.sql":   _000001_create_userUpSql,
	"000002_create_blog.down.sql": _000002_create_blogDownSql,
	"000002_create_blog.up.sql":   _000002_create_blogUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_user.down.sql": {_000001_create_userDownSql, map[string]*bintree{}},
	"000001_create_user.up.sql":   {_000001_create_userUpSql, map[string]*bintree{}},
	"000002_create_blog.down.sql": {_000002_create_blogDownSql, map[string]*bintree{}},
	"000002_create_blog.up.sql":   {_000002_create_blogUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
