// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTBlogs(t *testing.T) {
	t.Parallel()

	query := TBlogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTBlogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTBlogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TBlogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTBlogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TBlogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTBlogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TBlogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TBlog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TBlogExists to return true, but got false.")
	}
}

func testTBlogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tBlogFound, err := FindTBlog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tBlogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTBlogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TBlogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTBlogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TBlogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTBlogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tBlogOne := &TBlog{}
	tBlogTwo := &TBlog{}
	if err = randomize.Struct(seed, tBlogOne, tBlogDBTypes, false, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}
	if err = randomize.Struct(seed, tBlogTwo, tBlogDBTypes, false, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tBlogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tBlogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TBlogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTBlogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tBlogOne := &TBlog{}
	tBlogTwo := &TBlog{}
	if err = randomize.Struct(seed, tBlogOne, tBlogDBTypes, false, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}
	if err = randomize.Struct(seed, tBlogTwo, tBlogDBTypes, false, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tBlogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tBlogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tBlogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func tBlogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlog) error {
	*o = TBlog{}
	return nil
}

func testTBlogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TBlog{}
	o := &TBlog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tBlogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TBlog object: %s", err)
	}

	AddTBlogHook(boil.BeforeInsertHook, tBlogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tBlogBeforeInsertHooks = []TBlogHook{}

	AddTBlogHook(boil.AfterInsertHook, tBlogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tBlogAfterInsertHooks = []TBlogHook{}

	AddTBlogHook(boil.AfterSelectHook, tBlogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tBlogAfterSelectHooks = []TBlogHook{}

	AddTBlogHook(boil.BeforeUpdateHook, tBlogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tBlogBeforeUpdateHooks = []TBlogHook{}

	AddTBlogHook(boil.AfterUpdateHook, tBlogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tBlogAfterUpdateHooks = []TBlogHook{}

	AddTBlogHook(boil.BeforeDeleteHook, tBlogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tBlogBeforeDeleteHooks = []TBlogHook{}

	AddTBlogHook(boil.AfterDeleteHook, tBlogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tBlogAfterDeleteHooks = []TBlogHook{}

	AddTBlogHook(boil.BeforeUpsertHook, tBlogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tBlogBeforeUpsertHooks = []TBlogHook{}

	AddTBlogHook(boil.AfterUpsertHook, tBlogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tBlogAfterUpsertHooks = []TBlogHook{}
}

func testTBlogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTBlogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tBlogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTBlogToOneTUserUsingAuthorTUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TBlog
	var foreign TUser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tBlogDBTypes, false, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tUserDBTypes, false, tUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TUser struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Author = foreign.Email
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AuthorTUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Email != foreign.Email {
		t.Errorf("want: %v, got %v", foreign.Email, check.Email)
	}

	ranAfterSelectHook := false
	AddTUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *TUser) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TBlogSlice{&local}
	if err = local.L.LoadAuthorTUser(ctx, tx, false, (*[]*TBlog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorTUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AuthorTUser = nil
	if err = local.L.LoadAuthorTUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorTUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTBlogToOneSetOpTUserUsingAuthorTUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TBlog
	var b, c TUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tBlogDBTypes, false, strmangle.SetComplement(tBlogPrimaryKeyColumns, tBlogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tUserDBTypes, false, strmangle.SetComplement(tUserPrimaryKeyColumns, tUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tUserDBTypes, false, strmangle.SetComplement(tUserPrimaryKeyColumns, tUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TUser{&b, &c} {
		err = a.SetAuthorTUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AuthorTUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorTBlogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Author != x.Email {
			t.Error("foreign key was wrong value", a.Author)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Author))
		reflect.Indirect(reflect.ValueOf(&a.Author)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Author != x.Email {
			t.Error("foreign key was wrong value", a.Author, x.Email)
		}
	}
}

func testTBlogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTBlogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TBlogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTBlogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TBlogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tBlogDBTypes = map[string]string{`ID`: `uuid`, `Title`: `character varying`, `Content`: `text`, `Author`: `USER-DEFINED`, `CreateTime`: `timestamp without time zone`, `UpdateTime`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testTBlogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tBlogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tBlogAllColumns) == len(tBlogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTBlogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tBlogAllColumns) == len(tBlogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TBlog{}
	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tBlogDBTypes, true, tBlogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tBlogAllColumns, tBlogPrimaryKeyColumns) {
		fields = tBlogAllColumns
	} else {
		fields = strmangle.SetComplement(
			tBlogAllColumns,
			tBlogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TBlogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTBlogsUpsert(t *testing.T) {
	t.Parallel()

	if len(tBlogAllColumns) == len(tBlogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TBlog{}
	if err = randomize.Struct(seed, &o, tBlogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TBlog: %s", err)
	}

	count, err := TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tBlogDBTypes, false, tBlogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TBlog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TBlog: %s", err)
	}

	count, err = TBlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
